---
title: "An introduction to R7"
format: html
---

## Setup

Let's experiment with [R7](https://rconsortium.github.io/OOP-WG/articles/R7.html), a new OOP system.

```{r}
#| eval: false 
# install.packages("remotes")
remotes::install_github("rconsortium/OOP-WG")
```

Load:

```{r}
library(R7)
```

## Definition

A class has:
- a name
- properties: defined by a named list
- an optional validator

`new_class()`is used to define the class:

- it returns the class object
- the class object is also the constructor
- the same name is used for the object we assign the class to.

```{r}
perf <- new_class("perf", properties = list(
  tpf = class_numeric,
  fpf = class_numeric
))
perf
```

There are built-in definitions for base types:
- class_numeric (<integer> or <double>)
- class_double
- class_integer
- class_character
- class_logical
- ...

To instantiate, call the object (which is the constructor):

```{r}
test <- perf(tpf = 0.8, fpf = 0.2)
test
```

To identify the class of the object, call `R7_class`:

```{r}
R7_class(test)
```

Get or set properties with `@`:

```{r}
test@tpf <- 0.9
test@tpf
```

Note that types of the propoerties are validated when you instantiate or modify properties:

```{r}
try(perf(tpf = "what"))
try(test@tpf <- "nope")
```

## Generic and methods

Two-arguments:

- the name of the generic
- the name of the argument used for method dispatch

```{r}
accuracy <- new_generic("accuracy", "x")
```

Then we can register a method for our class:

```{r}
method(accuracy, perf) <- function(x){
  (x@tpf + 1 - x@fpf) / 2
}
```

```{r}
accuracy(test)
```

Register a fallback method for other R7_objects:

```{r}
method(accuracy, R7_object) <- function(x) {
  "An R7 object"
}
```

Show the methods defined for a generic:

```{r}
accuracy
```

Show a specific implementation:

```{r}
method(accuracy, perf)
```

## Validator

- takes `self` as an argument
- returns `NULL` if its valid or a string describing the problem

Implement with a serie of `if - else`.

Let's redefine our class. Our props should be scalar and within a range:

```{r}
perf <- new_class("perf", 
  properties = list(
    tpf = class_numeric,
    fpf = class_numeric
  ),
  validator = function(self){
    if (length(self@tpf) != 1) {
      "@tpf must be length 1"
    } else if (length(self@fpf) != 1) {
      "@fpf must be length 1"
    } else if (self@tpf <= 0 | self@tpf >= 1) {
      "@tpf must be >0 and <1"
    } else if (self@fpf <= 0 | self@fpf >= 1) {
      "@fpf must be >0 and <1"
    }
  }
)
```

```{r}
try(test <- perf(tpf = 1.5, fpf = 0.5))
```


## Properties

### Modify all at once

```{r}
test <- perf(tpf = .5, fpf = .5)
```

```{r}
props(test) <- list(tpf = .75, fpf = .2)
test
```


### Default

With the short syntax, default will be *empty* properties.

To set default use the full syntax:

```{r}
empty <- new_class("empty", 
  properties = list(
    x = new_property(class_numeric, default = 0)
  )
)
empty()
```


### Computed properties

Computed props are read-only. They can be implemented by defining a getter:

```{r}
perf <- new_class("perf", 
  properties = list(
    tpf = class_numeric,
    fpf = class_numeric,
    plr = new_property(
      getter = function(self) self@tpf/ self@fpf,
  )
))
```

```{r}
test <- perf(0.9, 0.2)
test@plr
```

### Dynamic prop

Requires to define a setter (and some logic and choices to update)

```{r}
perf <- new_class("perf", 
  properties = list(
    tpf = class_numeric,
    fpf = class_numeric,
    plr = new_property(
      class = class_double,
      getter = function(self) self@tpf/ self@fpf,
      setter = function(self, value) {
        #here we assume tpf is preserved
        self@fpf <- self@tpf / value
        self
      }
  )
))
```

```{r}
test <- perf(0.9, 0.2)
test@plr
```

```{r}
test@plr <- 5
test
```